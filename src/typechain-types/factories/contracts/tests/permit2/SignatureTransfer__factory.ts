/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  SignatureTransfer,
  SignatureTransferInterface,
} from "../../../../contracts/tests/permit2/SignatureTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount",
        type: "uint256",
      },
    ],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContractSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "signatureDeadline",
        type: "uint256",
      },
    ],
    name: "SignatureExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "word",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
    ],
    name: "UnorderedNonceInvalidation",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wordPos",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
    ],
    name: "invalidateUnorderedNonces",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "nonceBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        name: "transferDetails",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            name: "permitted",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        name: "transferDetails",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "witness",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "witnessTypeString",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            name: "permitted",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "witness",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "witnessTypeString",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523462000039575b6200001562000048565b604051611885620001c28239608051816108ab015260a0518161087b015261188590f35b62000042600080fd5b6200000b565b6200005262000054565b565b4660a052620000a47f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86662000174565b608052565b620000bf90620000c2906001600160a01b031682565b90565b6001600160a01b031690565b620000bf90620000a9565b620000bf90620000ce565b9052565b620000e490620000c2565b6200012462000052946200011d60609498979562000116608086019a6000870152565b6020850152565b6040830152565b0190620000e8565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200016557604052565b6200016f6200012c565b604052565b4691620001a9916200019c6200018a30620000d9565b604051958694602086019485620000f3565b9081038252038262000143565b620001bd620001b6825190565b9160200190565b209056fe60806040526004361015610018575b610016600080fd5b005b60003560e01c8063137c29fe146100a457806330f28b7a1461009b5780633644e515146100925780633ff9dcb1146100895780634fe02b4414610080578063edd9444b146100775763fe8ec1a70361000e57610072610848565b61000e565b5061007261074d565b5061007261051b565b50610072610443565b506100726103d8565b506100726103a2565b5061007261030b565b600080fd5b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176100f457604052565b6100fc6100bc565b604052565b9061011561010e60405190565b92836100d3565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036100ad57565b9050359061011582610126565b80610131565b9050359061011582610145565b919091604081840312610194575b61018e6101736040610101565b9360006101808285610138565b90860152602080930161014b565b90830152565b61019c600080fd5b610166565b9190916080818403126101e9575b61018e6101bc6060610101565b9360006101c98285610158565b908601526040926101dc8285830161014b565b602087015260600161014b565b6101f1600080fd5b6101af565b908160409103126102045790565b610123600080fd5b909182601f8301121561024f575b60208235926001600160401b038411610242575b01928284011161023a57565b610115600080fd5b61024a600080fd5b61022e565b610257600080fd5b61021a565b90610140828203126102fe575b61027381836101a1565b9261028182608085016101f6565b9261028f8360c08301610138565b9261029d8160e0840161014b565b926102e06102c1836101008601356001600160401b0381116102f1575b860161020c565b939094610120810135906001600160401b0382116102e4575b0161020c565b9091565b6102ec600080fd5b6102da565b6102f9600080fd5b6102ba565b610306600080fd5b610269565b5034610338575b61032f61032036600461025c565b969590959491949392936109af565b604051005b0390f35b610340600080fd5b610312565b61010081830312610395575b61035b82826101a1565b926102e061036c84608085016101f6565b9361037a8160c08601610138565b9360e0810135906001600160401b0382116102e4570161020c565b61039d600080fd5b610351565b50346103c0575b61032f6103b7366004610345565b93929092610998565b6103c8600080fd5b6103a9565b600091031261023a57565b5034610405575b6103ea3660046103cd565b6103346103f5610879565b6040519182918290815260200190565b61040d600080fd5b6103df565b919061012390604084820312610436575b61042d818561014b565b9360200161014b565b61043e600080fd5b610423565b503461045e575b61032f610458366004610412565b90610cf2565b610466600080fd5b61044a565b919061012390604084820312610486575b61042d8185610138565b61048e600080fd5b61047c565b61012390610117906001600160a01b031682565b61012390610493565b610123906104a7565b906104c3906104b0565b600052602052604060002090565b6101236101236101239290565b906104c3906104d1565b610123916008021c81565b9061012391546104e8565b61051661012392610511600093846104b9565b6104de565b6104f3565b5034610539575b6103346103f561053336600461046b565b906104fe565b610541600080fd5b610522565b602080916001600160401b03811161055d57020190565b6105656100bc565b020190565b9092919261057f61057a82610546565b610101565b9381855260406020860192028301928184116105bf575b915b8383106105a55750505050565b60206040916105b48486610158565b815201920191610598565b6105c7600080fd5b610596565b906101239181601f820112156105e8575b60208135910161056a565b6105f0600080fd5b6105dd565b919091606081840312610658575b61018e6106106060610101565b9361062d8184356001600160401b03811161064b575b85016105cc565b8552602061063d8285830161014b565b90860152604080930161014b565b610653600080fd5b610626565b610660600080fd5b610603565b909182601f830112156106a3575b60208235926001600160401b038411610696575b01926040830284011161023a57565b61069e600080fd5b610687565b6106ab600080fd5b610673565b6102e090608081840312610740575b6106db8382356001600160401b038111610733575b83016105f5565b936106fb8460208401356001600160401b038111610726575b8401610665565b93909461070b8160408601610138565b936060810135906001600160401b0382116102e4570161020c565b61072e600080fd5b6106f4565b61073b600080fd5b6106d4565b610748600080fd5b6106bf565b503461076e575b61032f6107623660046106b0565b94939093929192610b0c565b610776600080fd5b610754565b909160c08284031261083b575b6107a48383356001600160401b03811161082e575b84016105f5565b926107c48160208501356001600160401b038111610821575b8501610665565b9290936107d48360408301610138565b926107e2816060840161014b565b926102e06108048360808601356001600160401b0381116102f157860161020c565b93909460a0810135906001600160401b0382116102e4570161020c565b610829600080fd5b6107bd565b610836600080fd5b61079d565b610843600080fd5b610788565b503461086c575b61032f61085d36600461077b565b97969096959195949294610b23565b610874600080fd5b61084f565b7f0000000000000000000000000000000000000000000000000000000000000000466108a4565b9190565b036108cd577f000000000000000000000000000000000000000000000000000000000000000090565b6101237f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610953565b6109446101159461093d606094989795610936608086019a6000870152565b6020850152565b6040830152565b01906001600160a01b03169052565b469161098291610976610965306104b0565b604051958694602086019485610917565b908103825203826100d3565b61099461098d825190565b9160200190565b2090565b90916101159493926109a983610ebb565b926109d7565b93946101159796956109a992939486611230565b3561012381610145565b3561012381610126565b9594939092936109e9602085016109c3565b9460408801426109fd6108a0610123845190565b11610a9c575087516020015188908711610a6c5760006101159899610a4b87610a66978497610a45610a5f98610a40610a3a6020610a5a9b015190565b86610d73565b610ae3565b9161157f565b5101516001600160a01b031690565b6104b0565b93016109cd565b916117f9565b610a98610a7b60208b51015190565b604051633728b83d60e01b81529182916004830190815260200190565b0390fd5b5160405163cd21db4f60e01b81526004810191909152602490fd5b0190565b6020809392610add610ad8610ab79461190160f01b815260020190565b918252565b01918252565b61098261097691610af2600090565b50610afb610879565b604051938492602084019283610abb565b9161011595949391610b1d84610fdc565b93610b8f565b9495610115989796610b1d929394958761134d565b50634e487b7160e01b600052603260045260246000fd5b9060208091610b5c845190565b811015610b6a575b02010190565b610b72610b38565b610b64565b91604091811015610b8757020190565b610565610b38565b8051519297959691949092966040840142610bae6108a0610123845190565b11610a9c5750888803610ca157610bd292610a458693610a40610a3a602089015190565b600093610bde856104d1565b865b811015610c9757610bf48187850151610b4f565b51610c0b6020610c05848c8a610b77565b016109c3565b9060208101610c1b610123825190565b8311610c8d57509180610c4d9288888d8c610be098610c39826104d1565b8603610c54575b5050505050505060010190565b9050610bde565b610c8196610a6693610c75610a5a85610c7b9501516001600160a01b031690565b96610b77565b016109cd565b803888888d8c84610c40565b51610a9890610a7b565b5095505050505050565b6040516001621398b960e31b03198152600490fd5b6101239081565b6101239054610cb6565b90610123610123610cd7926104d1565b9055565b9081526040810192916101159160200152565b0152565b903390610d18610d07846105118560006104b9565b82610d1182610cbd565b1790610cc7565b610d427f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d926104b0565b92610d58610d4f60405190565b92839283610cdb565b0390a2565b61012390610d6e6108a06101239490565b901b90565b906108a0610d9b610da8610d89610dc494610e44565b610d9660019492946104d1565b610d5d565b91610511600096876104b9565b610dbd82610db583610cbd565b188092610cc7565b16926104d1565b14610dcb57565b604051633ab3447f60e11b8152600490fd5b610dea6101236101239290565b60ff1690565b61012390610e046108a06101239460ff1690565b901c90565b610e166101236101239290565b6001600160f81b031690565b6101239081906001600160f81b031681565b6101236101236101239260ff1690565b90610123610e74610e6e610e69610e64610e5e6008610ddd565b87610df0565b610e09565b610e22565b93610ddd565b610e34565b9095949261011594610eb4610cee92610ea4608096610e9d60a088019c6000890152565b6020870152565b6001600160a01b03166040850152565b6060830152565b610982610ecb6000830151611421565b7f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801066109763394610f076040610f01602084015190565b92015190565b90610f1160405190565b968795602087019586610e79565b90610ad861057a83610546565b369037565b90610115610f47610f4184610f1f565b93610546565b601f190160208401610f2c565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610f7b570190565b610ab7610f54565b90610f9d610f96610f92845190565b9290565b9260200190565b9060005b818110610fae5750505090565b909192610fcb610fc46001928651815260200190565b9460200190565b929101610fa1565b61012391610f83565b80515190610fe982610f31565b90600093610ff6856104d1565b845b811015611038576110318161102c61101f611019610ff8958b890151610b4f565b51611421565b6110298389610b4f565b52565b610f6b565b9050610ff6565b5093509150610982907ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7669061107f61106f60405190565b8092610976602083019182610fd3565b61108a61098d825190565b20906109763394610f076040610f01602084015190565b610ab76020916001600160401b0381116110bf57601f01601f191690565b6100b26100bc565b90610ad861057a836110a1565b6110de60646110c7565b7f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208201527f65726d697373696f6e73207065726d69747465642c616464726573732073706560408201527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c6060820152631a5b994b60e21b608082015290565b6101236110d4565b610123611160565b60005b8381106111835750506000910152565b8181015183820152602001611173565b610ab76111ab926020926111a5815190565b94859290565b93849101611170565b90826000939282370152565b9091610ab790839080936111b4565b6111dd906101239492611193565b916111c0565b9194611229610cee9298979561122260a0966112126101159a61120b60c08a019e60008b0152565b6020890152565b6001600160a01b03166040870152565b6060850152565b6080830152565b9261126361098293611240600090565b50611249611168565b61097661125560405190565b9485936020850193846111cf565b61126e61098d825190565b2061097661127f6000860151611421565b9233956112926040610f01602084015190565b9061129c60405190565b9788966020880196876111e3565b6112b4606b6110c7565b7f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208201527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c6164647260408201527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608201526a0d88191958591b1a5b994b60aa1b608082015290565b6101236112aa565b61012361133d565b9392909161135d90611249611345565b61136861098d825190565b208351519093909261137984610f31565b92600095611386876104d1565b865b8110156113ba576113b38161102c6113a9611019611388958d8b0151610b4f565b611029838b610b4f565b9050611386565b50919550919350610976610982936113d461106f60405190565b6113df61098d825190565b209233956112926040610f01602084015190565b80516001600160a01b03168252602090810151910152565b90815260608101929161011591602001906113f3565b61098261097691611430600090565b507f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a160405193849260208401928361140b565b6001600160e01b03198116610131565b9050519061011582611463565b90610123916020818303121561147357611498600080fd5b611473565b91906100b2816114b481610ab79560209181520190565b80956111b4565b9081526040602082018190526101239391019161149d565b506040513d6000823e3d90fd5b6101236001600160ff1b036104d1565b610123906104d1565b60ff9081169116019060ff821161150c57565b610115610f54565b91600191811015610b8757020190565b610dea6101236101239260ff1690565b6101239060f81c611524565b610cee6101159461093d60609498979561155f608086019a6000870152565b60ff166020850152565b6101176101236101239290565b61012390611569565b6000939290919084843b6115956108a0836104d1565b036116fa5785929190826115a960416104d1565b8103611673575050611600846115f26115ed6115df6115cc8760209a0185610412565b9490976115d960406104d1565b91611514565b356001600160f81b03191690565b611534565b935b60405194859485611540565b838052039060015afa15611666575b815161161f906101179093611576565b6001600160a01b03831614611654576001600160a01b0390811691160361164257565b604051632057875960e21b8152600490fd5b604051638baa579f60e01b8152600490fd5b61166e6114d3565b61160f565b909493506116846108a060406104d1565b036116e85761169e86936116009360209650810190610412565b9290926116e26116d26116cd6116c86116b56114e0565b8516946116c260ff610ddd565b90610df0565b6114f0565b610ddd565b6116dc601b610ddd565b906114f9565b936115f4565b604051634be6321b60e01b8152600490fd5b5091935061172f61170f610a5a6020956104b0565b9161173a631626ba7e9161172260405190565b9788968795869560e01b90565b8552600485016114bb565b03915afa9081156117a9575b60009161177b575b50630b135d3f60e11b906001600160e01b0319160361176957565b604051632c19a72f60e21b8152600490fd5b61179c915060203d81116117a2575b61179481836100d3565b810190611480565b3861174e565b503d61178a565b6117b16114d3565b611746565b156117bd57565b60405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606490fd5b600091826064926101159660209661180f600090565b506040516323b872dd60e01b81526001600160a01b0395861660048201529416602485015260448401525af13d15601f3d116001600051141617166117b656fea26469706673582212201c7de546b415500f5f39261d1c8e3a5aca24e29fbc8357aff1546295c7bd221364736f6c63430008110033";

type SignatureTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureTransfer__factory extends ContractFactory {
  constructor(...args: SignatureTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SignatureTransfer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SignatureTransfer__factory {
    return super.connect(runner) as SignatureTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureTransferInterface {
    return new Interface(_abi) as SignatureTransferInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SignatureTransfer {
    return new Contract(address, _abi, runner) as unknown as SignatureTransfer;
  }
}
