/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ITravelLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blacklistAddresses"
      | "isBlacklisted"
      | "isMerchant"
      | "isTraveler"
      | "unBlacklistAddresses"
      | "unWhitelistMerchants"
      | "unWhitelistTravelers"
      | "whitelistMerchants"
      | "whitelistTravelers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Blacklist" | "MerchantList" | "TravelerList"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blacklistAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMerchant",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTraveler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unBlacklistAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unWhitelistMerchants",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unWhitelistTravelers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMerchants",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTravelers",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMerchant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTraveler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unBlacklistAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unWhitelistMerchants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unWhitelistTravelers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMerchants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTravelers",
    data: BytesLike
  ): Result;
}

export namespace BlacklistEvent {
  export type InputTuple = [action: string, addresses: AddressLike[]];
  export type OutputTuple = [action: string, addresses: string[]];
  export interface OutputObject {
    action: string;
    addresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerchantListEvent {
  export type InputTuple = [
    action: string,
    _tokenId: BigNumberish,
    addresses: AddressLike[]
  ];
  export type OutputTuple = [
    action: string,
    _tokenId: bigint,
    addresses: string[]
  ];
  export interface OutputObject {
    action: string;
    _tokenId: bigint;
    addresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TravelerListEvent {
  export type InputTuple = [action: string, addresses: AddressLike[]];
  export type OutputTuple = [action: string, addresses: string[]];
  export interface OutputObject {
    action: string;
    addresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITravelLogic extends BaseContract {
  connect(runner?: ContractRunner | null): ITravelLogic;
  waitForDeployment(): Promise<this>;

  interface: ITravelLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blacklistAddresses: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  isBlacklisted: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  isMerchant: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  isTraveler: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  unBlacklistAddresses: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  unWhitelistMerchants: TypedContractMethod<
    [_tokenId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  unWhitelistTravelers: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  whitelistMerchants: TypedContractMethod<
    [_tokenId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  whitelistTravelers: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blacklistAddresses"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "isMerchant"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTraveler"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unBlacklistAddresses"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unWhitelistMerchants"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unWhitelistTravelers"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistMerchants"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistTravelers"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "Blacklist"
  ): TypedContractEvent<
    BlacklistEvent.InputTuple,
    BlacklistEvent.OutputTuple,
    BlacklistEvent.OutputObject
  >;
  getEvent(
    key: "MerchantList"
  ): TypedContractEvent<
    MerchantListEvent.InputTuple,
    MerchantListEvent.OutputTuple,
    MerchantListEvent.OutputObject
  >;
  getEvent(
    key: "TravelerList"
  ): TypedContractEvent<
    TravelerListEvent.InputTuple,
    TravelerListEvent.OutputTuple,
    TravelerListEvent.OutputObject
  >;

  filters: {
    "Blacklist(string,address[])": TypedContractEvent<
      BlacklistEvent.InputTuple,
      BlacklistEvent.OutputTuple,
      BlacklistEvent.OutputObject
    >;
    Blacklist: TypedContractEvent<
      BlacklistEvent.InputTuple,
      BlacklistEvent.OutputTuple,
      BlacklistEvent.OutputObject
    >;

    "MerchantList(string,uint256,address[])": TypedContractEvent<
      MerchantListEvent.InputTuple,
      MerchantListEvent.OutputTuple,
      MerchantListEvent.OutputObject
    >;
    MerchantList: TypedContractEvent<
      MerchantListEvent.InputTuple,
      MerchantListEvent.OutputTuple,
      MerchantListEvent.OutputObject
    >;

    "TravelerList(string,address[])": TypedContractEvent<
      TravelerListEvent.InputTuple,
      TravelerListEvent.OutputTuple,
      TravelerListEvent.OutputObject
    >;
    TravelerList: TypedContractEvent<
      TravelerListEvent.InputTuple,
      TravelerListEvent.OutputTuple,
      TravelerListEvent.OutputObject
    >;
  };
}
