/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPayment {
  export type PayStruct = {
    id: BigNumberish;
    timestamp: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    fee: BigNumberish;
    feeTo: AddressLike;
  };

  export type PayStructOutput = [
    id: bigint,
    timestamp: bigint,
    from: string,
    to: string,
    token: string,
    amount: bigint,
    fee: bigint,
    feeTo: string
  ] & {
    id: bigint;
    timestamp: bigint;
    from: string;
    to: string;
    token: string;
    amount: bigint;
    fee: bigint;
    feeTo: string;
  };

  export type SignatureStruct = {
    nonce: BigNumberish;
    deadline: BigNumberish;
    signature: BytesLike;
  };

  export type SignatureStructOutput = [
    nonce: bigint,
    deadline: bigint,
    signature: string
  ] & { nonce: bigint; deadline: bigint; signature: string };
}

export interface IPaymentInterface extends Interface {
  getFunction(
    nameOrSignature: "getPayment" | "pay" | "payPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      IPayment.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payPermit",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      IPayment.SignatureStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payPermit", data: BytesLike): Result;
}

export interface IPayment extends BaseContract {
  connect(runner?: ContractRunner | null): IPayment;
  waitForDeployment(): Promise<this>;

  interface: IPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPayment: TypedContractMethod<
    [id: BigNumberish],
    [IPayment.PayStructOutput],
    "view"
  >;

  pay: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _feeTo: AddressLike,
      _sig: IPayment.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  payPermit: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _feeTo: AddressLike,
      _sig: IPayment.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPayment"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IPayment.PayStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pay"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _feeTo: AddressLike,
      _sig: IPayment.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payPermit"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _feeTo: AddressLike,
      _sig: IPayment.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
